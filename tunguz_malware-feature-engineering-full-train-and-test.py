#  This is just the feature engineering portion of FabienDaniel's kernel https://www.kaggle.com/fabiendaniel/detecting-malwares-with-lgbm

#  It is essentially the same as my previous kernel (https://www.kaggle.com/tunguz/malware-feature-engineering-only), 

#  but here I tried to transform the ENTIRE train and test files.

#  Its purpose is to just do the feature engineering, and save the new FE files so that they can be used 

#  by other kernels which just do the modeling part. 



import numpy as np # linear algebra

import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

from tqdm import tqdm

import gc



import lightgbm as lgb

from sklearn.model_selection import KFold

import warnings

import gc

import time

import sys

import datetime



# Input data files are available in the "../input/" directory.

# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory



import os

print(os.listdir("../input"))



# Any results you write to the current directory are saved as output.
dtypes = {

        'MachineIdentifier':                                    'category',

        'ProductName':                                          'category',

        'EngineVersion':                                        'category',

        'AppVersion':                                           'category',

        'AvSigVersion':                                         'category',

        'IsBeta':                                               'int8',

        'RtpStateBitfield':                                     'float16',

        'IsSxsPassiveMode':                                     'int8',

        'DefaultBrowsersIdentifier':                            'float16',

        'AVProductStatesIdentifier':                            'float32',

        'AVProductsInstalled':                                  'float16',

        'AVProductsEnabled':                                    'float16',

        'HasTpm':                                               'int8',

        'CountryIdentifier':                                    'int16',

        'CityIdentifier':                                       'float32',

        'OrganizationIdentifier':                               'float16',

        'GeoNameIdentifier':                                    'float16',

        'LocaleEnglishNameIdentifier':                          'int8',

        'Platform':                                             'category',

        'Processor':                                            'category',

        'OsVer':                                                'category',

        'OsBuild':                                              'int16',

        'OsSuite':                                              'int16',

        'OsPlatformSubRelease':                                 'category',

        'OsBuildLab':                                           'category',

        'SkuEdition':                                           'category',

        'IsProtected':                                          'float16',

        'AutoSampleOptIn':                                      'int8',

        'PuaMode':                                              'category',

        'SMode':                                                'float16',

        'IeVerIdentifier':                                      'float16',

        'SmartScreen':                                          'category',

        'Firewall':                                             'float16',

        'UacLuaenable':                                         'float32',

        'Census_MDC2FormFactor':                                'category',

        'Census_DeviceFamily':                                  'category',

        'Census_OEMNameIdentifier':                             'float16',

        'Census_OEMModelIdentifier':                            'float32',

        'Census_ProcessorCoreCount':                            'float16',

        'Census_ProcessorManufacturerIdentifier':               'float16',

        'Census_ProcessorModelIdentifier':                      'float16',

        'Census_ProcessorClass':                                'category',

        'Census_PrimaryDiskTotalCapacity':                      'float32',

        'Census_PrimaryDiskTypeName':                           'category',

        'Census_SystemVolumeTotalCapacity':                     'float32',

        'Census_HasOpticalDiskDrive':                           'int8',

        'Census_TotalPhysicalRAM':                              'float32',

        'Census_ChassisTypeName':                               'category',

        'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float16',

        'Census_InternalPrimaryDisplayResolutionHorizontal':    'float16',

        'Census_InternalPrimaryDisplayResolutionVertical':      'float16',

        'Census_PowerPlatformRoleName':                         'category',

        'Census_InternalBatteryType':                           'category',

        'Census_InternalBatteryNumberOfCharges':                'float32',

        'Census_OSVersion':                                     'category',

        'Census_OSArchitecture':                                'category',

        'Census_OSBranch':                                      'category',

        'Census_OSBuildNumber':                                 'int16',

        'Census_OSBuildRevision':                               'int32',

        'Census_OSEdition':                                     'category',

        'Census_OSSkuName':                                     'category',

        'Census_OSInstallTypeName':                             'category',

        'Census_OSInstallLanguageIdentifier':                   'float16',

        'Census_OSUILocaleIdentifier':                          'int16',

        'Census_OSWUAutoUpdateOptionsName':                     'category',

        'Census_IsPortableOperatingSystem':                     'int8',

        'Census_GenuineStateName':                              'category',

        'Census_ActivationChannel':                             'category',

        'Census_IsFlightingInternal':                           'float16',

        'Census_IsFlightsDisabled':                             'float16',

        'Census_FlightRing':                                    'category',

        'Census_ThresholdOptIn':                                'float16',

        'Census_FirmwareManufacturerIdentifier':                'float16',

        'Census_FirmwareVersionIdentifier':                     'float32',

        'Census_IsSecureBootEnabled':                           'int8',

        'Census_IsWIMBootEnabled':                              'float16',

        'Census_IsVirtualDevice':                               'float16',

        'Census_IsTouchEnabled':                                'int8',

        'Census_IsPenCapable':                                  'int8',

        'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',

        'Wdft_IsGamer':                                         'float16',

        'Wdft_RegionIdentifier':                                'float16',

        'HasDetections':                                        'int8'

        }
numerics = ['int8', 'int16', 'int32', 'int64', 'float16', 'float32', 'float64']

numerical_columns = [c for c,v in dtypes.items() if v in numerics]

categorical_columns = [c for c,v in dtypes.items() if v not in numerics]
retained_columns = numerical_columns + categorical_columns

train = pd.read_csv('../input/train.csv',

                    usecols = retained_columns,

                    dtype = dtypes)
true_numerical_columns = [

    'Census_ProcessorCoreCount',

    'Census_PrimaryDiskTotalCapacity',

    'Census_SystemVolumeTotalCapacity',

    'Census_TotalPhysicalRAM',

    'Census_InternalPrimaryDiagonalDisplaySizeInInches',

    'Census_InternalPrimaryDisplayResolutionHorizontal',

    'Census_InternalPrimaryDisplayResolutionVertical',

    'Census_InternalBatteryNumberOfCharges'

]



binary_variables = [c for c in train.columns if train[c].nunique() == 2]



categorical_columns = [c for c in train.columns 

                       if (c not in true_numerical_columns) & (c not in binary_variables)]

                       



variables = {

    'categorical_columns': len(categorical_columns),

    'binary_variables': len(binary_variables),

    'true_numerical_columns': len(true_numerical_columns)

}



cardinality = []

for c in categorical_columns:

    if c == 'MachineIdentifier': continue

    cardinality.append([c, train[c].nunique()])

cardinality.sort(key = lambda x:x[1], reverse=False)



def frequency_encoding(variable):

    t = train[variable].value_counts().reset_index()

    t = t.reset_index()

    t.loc[t[variable] == 1, 'level_0'] = np.nan

    t.set_index('index', inplace=True)

    max_label = t['level_0'].max() + 1

    t.fillna(max_label, inplace=True)

    return t.to_dict()['level_0']

    



indexer = {}

for col in tqdm(categorical_columns):

    if col == 'MachineIdentifier': continue

    _, indexer[col] = pd.factorize(train[col])

    

for col in tqdm(categorical_columns):

    if col == 'MachineIdentifier': continue

    train[col] = indexer[col].get_indexer(train[col])
freq_enc_dict_dict = {}

for variable in tqdm(['Census_OEMModelIdentifier', 'CityIdentifier', 'Census_FirmwareVersionIdentifier']):

    freq_enc_dict_dict[variable] = frequency_encoding(variable)

    train[variable] = train[variable].map(lambda x: freq_enc_dict_dict[variable].get(x, np.nan))

    
verbose=True

numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']

start_mem = train.memory_usage().sum() / 1024**2    

for col in tqdm(train.columns):

    col_type = train[col].dtypes

    if col_type in numerics:

        c_min = train[col].min()

        c_max = train[col].max()

        if str(col_type)[:3] == 'int':

            if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:

                train[col] = train[col].astype(np.int8)

            elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:

                train[col] = train[col].astype(np.int16)

            elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:

                train[col] = train[col].astype(np.int32)

            elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:

                train[col] = train[col].astype(np.int64)  

        else:

            if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:

                train[col] = train[col].astype(np.float16)

            elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:

                train[col] = train[col].astype(np.float32)

            else:

                train[col] = train[col].astype(np.float64)    

end_mem = train.memory_usage().sum() / 1024**2

if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) / start_mem))
gc.collect()

gc.collect()
train.to_csv('new_train.csv')
del train

gc.collect()

gc.collect()
retained_columns.remove('HasDetections')

test = pd.read_csv('../input/test.csv',

                   usecols = retained_columns,

                   dtype = dtypes)
for col in tqdm(categorical_columns):

    if col == 'MachineIdentifier': continue

    test[col] = indexer[col].get_indexer(test[col])
for variable in tqdm(['Census_OEMModelIdentifier', 'CityIdentifier', 'Census_FirmwareVersionIdentifier']):

    test[variable] = test[variable].map(lambda x: freq_enc_dict_dict[variable].get(x, np.nan))
verbose=True

numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']

start_mem = test.memory_usage().sum() / 1024**2    

for col in tqdm(test.columns):

    col_type = test[col].dtypes

    if col_type in numerics:

        c_min = test[col].min()

        c_max = test[col].max()

        if str(col_type)[:3] == 'int':

            if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:

                test[col] = test[col].astype(np.int8)

            elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:

                test[col] = test[col].astype(np.int16)

            elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:

                test[col] = test[col].astype(np.int32)

            elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:

                test[col] = test[col].astype(np.int64)  

        else:

            if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:

                test[col] = test[col].astype(np.float16)

            elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:

                test[col] = test[col].astype(np.float32)

            else:

                test[col] = test[col].astype(np.float64)    

end_mem = test.memory_usage().sum() / 1024**2

if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) / start_mem))
gc.collect()

gc.collect()
test.to_csv('new_test.csv')
test.head()