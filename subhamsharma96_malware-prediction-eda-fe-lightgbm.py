import pandas as pd

import numpy as np

import gc



# Gradient Boosting

import lightgbm as lgb



# Scikit-learn

from sklearn.metrics import average_precision_score

from sklearn.model_selection import StratifiedKFold,KFold

from sklearn.metrics import classification_report, confusion_matrix, roc_curve, auc



# Graphics

import matplotlib.pyplot as plt

import seaborn as sns




# Metrics

from sklearn.metrics import average_precision_score, roc_auc_score, mean_absolute_error



import os

import warnings

def ignore_warn(*args, **kwargs):

    pass

warnings.warn = ignore_warn
dtypes = {

        'MachineIdentifier':                                    'category',

        'ProductName':                                          'category',

        'EngineVersion':                                        'category',

        'AppVersion':                                           'category',

        'AvSigVersion':                                         'category',

        'IsBeta':                                               'int8',

        'RtpStateBitfield':                                     'float16',

        'IsSxsPassiveMode':                                     'int8',

        'DefaultBrowsersIdentifier':                            'float32',

        'AVProductStatesIdentifier':                            'float32',

        'AVProductsInstalled':                                  'float16',

        'AVProductsEnabled':                                    'float16',

        'HasTpm':                                               'int8',

        'CountryIdentifier':                                    'int16',

        'CityIdentifier':                                       'float32',

        'OrganizationIdentifier':                               'float16',

        'GeoNameIdentifier':                                    'float16',

        'LocaleEnglishNameIdentifier':                          'int16',

        'Platform':                                             'category',

        'Processor':                                            'category',

        'OsVer':                                                'category',

        'OsBuild':                                              'int16',

        'OsSuite':                                              'int16',

        'OsPlatformSubRelease':                                 'category',

        'OsBuildLab':                                           'category',

        'SkuEdition':                                           'category',

        'IsProtected':                                          'float16',

        'AutoSampleOptIn':                                      'int8',

        'PuaMode':                                              'category',

        'SMode':                                                'float16',

        'IeVerIdentifier':                                      'float16',

        'SmartScreen':                                          'category',

        'Firewall':                                             'float16',

        'UacLuaenable':                                         'float64', # was 'float32'

        'Census_MDC2FormFactor':                                'category',

        'Census_DeviceFamily':                                  'category',

        'Census_OEMNameIdentifier':                             'float32', # was 'float16'

        'Census_OEMModelIdentifier':                            'float32',

        'Census_ProcessorCoreCount':                            'float16',

        'Census_ProcessorManufacturerIdentifier':               'float16',

        'Census_ProcessorModelIdentifier':                      'float32', # was 'float16'

        'Census_ProcessorClass':                                'category',

        'Census_PrimaryDiskTotalCapacity':                      'float64', # was 'float32'

        'Census_PrimaryDiskTypeName':                           'category',

        'Census_SystemVolumeTotalCapacity':                     'float64', # was 'float32'

        'Census_HasOpticalDiskDrive':                           'int8',

        'Census_TotalPhysicalRAM':                              'float32',

        'Census_ChassisTypeName':                               'category',

        'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float32', # was 'float16'

        'Census_InternalPrimaryDisplayResolutionHorizontal':    'float32', # was 'float16'

        'Census_InternalPrimaryDisplayResolutionVertical':      'float32', # was 'float16'

        'Census_PowerPlatformRoleName':                         'category',

        'Census_InternalBatteryType':                           'category',

        'Census_InternalBatteryNumberOfCharges':                'float64', # was 'float32'

        'Census_OSVersion':                                     'category',

        'Census_OSArchitecture':                                'category',

        'Census_OSBranch':                                      'category',

        'Census_OSBuildNumber':                                 'int16',

        'Census_OSBuildRevision':                               'int32',

        'Census_OSEdition':                                     'category',

        'Census_OSSkuName':                                     'category',

        'Census_OSInstallTypeName':                             'category',

        'Census_OSInstallLanguageIdentifier':                   'float16',

        'Census_OSUILocaleIdentifier':                          'int16',

        'Census_OSWUAutoUpdateOptionsName':                     'category',

        'Census_IsPortableOperatingSystem':                     'int8',

        'Census_GenuineStateName':                              'category',

        'Census_ActivationChannel':                             'category',

        'Census_IsFlightingInternal':                           'float16',

        'Census_IsFlightsDisabled':                             'float16',

        'Census_FlightRing':                                    'category',

        'Census_ThresholdOptIn':                                'float16',

        'Census_FirmwareManufacturerIdentifier':                'float16',

        'Census_FirmwareVersionIdentifier':                     'float32',

        'Census_IsSecureBootEnabled':                           'int8',

        'Census_IsWIMBootEnabled':                              'float16',

        'Census_IsVirtualDevice':                               'float16',

        'Census_IsTouchEnabled':                                'int8',

        'Census_IsPenCapable':                                  'int8',

        'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',

        'Wdft_IsGamer':                                         'float16',

        'Wdft_RegionIdentifier':                                'float16',

        'HasDetections':                                        'int8'

        }

def reduce_mem_usage(df, verbose=True):

    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']

    start_mem = df.memory_usage(deep=True).sum() / 1024**2    

    for col in df.columns:

        col_type = df[col].dtypes

        if col_type in numerics:

            c_min = df[col].min()

            c_max = df[col].max()

            if str(col_type)[:3] == 'int':

                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:

                    df[col] = df[col].astype(np.int8)

                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:

                    df[col] = df[col].astype(np.int16)

                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:

                    df[col] = df[col].astype(np.int32)

                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:

                    df[col] = df[col].astype(np.int64)  

            else:

                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:

                    df[col] = df[col].astype(np.float16)

                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:

                    df[col] = df[col].astype(np.float32)

                else:

                    df[col] = df[col].astype(np.float64)    

    end_mem = df.memory_usage(deep=True).sum() / 1024**2

    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) / start_mem))

    return df
from copy import deepcopy

dtypes1 = deepcopy(dtypes) 

del dtypes1['HasDetections']

dtypes1
malware_data=pd.read_csv('../input/train.csv',nrows=2000000, dtype=dtypes)

malware_data = reduce_mem_usage(malware_data)
malware_data_test=pd.read_csv('../input/test.csv', dtype=dtypes1)

malware_data_test = reduce_mem_usage(malware_data_test)
malware_data.head(10) #Checking the  training data
(malware_data.isnull().sum()/malware_data.shape[0]).sort_values(ascending=False)
remove_cols = ['PuaMode','MachineIdentifier']

malware_data.drop(remove_cols, axis=1, inplace=True)



malware_data_test.drop(remove_cols, axis=1, inplace=True)
malware_data.head(10) #Checking the  training data
malware_data_test.head(10) #Checking the test data
true_numerical_columns = [

    'Census_ProcessorCoreCount',

    'Census_PrimaryDiskTotalCapacity',

    'Census_SystemVolumeTotalCapacity',

    'Census_TotalPhysicalRAM',

    'Census_InternalPrimaryDiagonalDisplaySizeInInches',

    'Census_InternalPrimaryDisplayResolutionHorizontal',

    'Census_InternalPrimaryDisplayResolutionVertical',

    'Census_InternalBatteryNumberOfCharges'

]
binary_variables = [c for c in malware_data.columns if malware_data[c].nunique() == 2]

binary_variables
categorical_columns = [c for c in malware_data.columns 

                       if (c not in true_numerical_columns) & (c not in binary_variables)]
categorical_columns
train_df=malware_data

X_test=malware_data_test

del malware_data

del malware_data_test
gc.collect() #Garbage Collector to release unreferenced memory
from sklearn.preprocessing import LabelEncoder

train_length = train_df.shape[0]

for col in (categorical_columns):

    combined_data = pd.concat([train_df[col], X_test[col]])

    combined_data, _ = pd.factorize(combined_data)

    combined_data = pd.Series(combined_data).astype('int32')

    train_df[col] = combined_data.iloc[:train_length].values

    X_test[col] = combined_data.iloc[train_length:].values

    train_df[col] = train_df[col].fillna(0)

    X_test[col] = X_test[col].fillna(0)

    del combined_data
train_df = reduce_mem_usage(train_df)

X_test = reduce_mem_usage(X_test)
param = {   

        'boosting_type': 'gbdt',

        'objective': 'binary',

        'metric': 'auc',

        'nthread': 4,

        'learning_rate': 0.05,

        'max_depth': 5,

        'num_leaves': 40,

        'sub_feature': 0.9,

        'sub_row':0.9,

        'bagging_freq': 1,

        'lambda_l1': 0.1,

        'lambda_l2': 0.1,

        'random_state': 15

        }
kf = StratifiedKFold(n_splits=5, shuffle=True, random_state=15) 
gc.collect()
# Create arrays and dataframes to store results

oof_preds = np.zeros(train_df.shape[0])

sub_preds = np.zeros(len(X_test))

feature_importance_df = pd.DataFrame()

feats = [f for f in train_df.columns if f not in ['HasDetections']]

    

for n_fold, (train_idx, valid_idx) in enumerate(kf.split(train_df[feats], train_df['HasDetections'])):

    print(n_fold)

    trn_data = lgb.Dataset(train_df.iloc[train_idx][feats], label=train_df['HasDetections'].iloc[train_idx])    

    val_data = lgb.Dataset(train_df.iloc[valid_idx][feats], label=train_df['HasDetections'].iloc[valid_idx])

        

    clf = lgb.train(param, trn_data,5120, valid_sets = [trn_data, val_data], verbose_eval=100, early_stopping_rounds = 200)   



    oof_preds[valid_idx] = clf.predict(train_df.iloc[valid_idx][feats], num_iteration=clf.best_iteration) 

    

    

    fold_importance_df = pd.DataFrame()

    fold_importance_df["Feature"] = feats

    fold_importance_df["importance"] = clf.feature_importance()

    fold_importance_df["fold"] = n_fold + 1

    feature_importance_df = pd.concat([feature_importance_df, fold_importance_df], axis=0)

    

    

    # we perform predictions by chunks

    initial_idx = 0

    chunk_size = 100000

    current_pred = np.zeros(len(X_test))

    

    while initial_idx < X_test.shape[0]:

        final_idx = min(initial_idx + chunk_size, X_test.shape[0])

        idx = range(initial_idx, final_idx)

        current_pred[idx] = clf.predict(X_test.iloc[idx][feats], num_iteration=clf.best_iteration)

        initial_idx = final_idx

        

    sub_preds += current_pred / 5



print('Full AUC score %.6f' % roc_auc_score(train_df['HasDetections'], oof_preds))
cols = (feature_importance_df[["Feature", "importance"]]

        .groupby("Feature")

        .mean()

        .sort_values(by="importance", ascending=False)[:150].index)

best_features = feature_importance_df.loc[feature_importance_df.Feature.isin(cols)]



plt.figure(figsize=(14,28))

sns.barplot(x="importance", y="Feature", data=best_features.sort_values(by="importance",ascending=False))

plt.title('Features importance (averaged/folds)')

plt.tight_layout()

plt.savefig('FI.png')
sample_submission = pd.read_csv('../input/sample_submission.csv')

sample_submission['HasDetections'] = sub_preds

sample_submission.to_csv('submission.csv', index=False)